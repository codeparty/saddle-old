// Generated by CoffeeScript 1.4.0
var Item, ItemRange;

ItemRange = require('./ItemRange');

Item = (function() {
  var doc, itemsMap;

  doc = document;

  itemsMap = {};

  Item.get = function(id) {
    var el, item;
    if ((item = itemsMap[id]) && doc.contains(item.el || item.range)) {
      return item;
    }
    return itemsMap[id] = (el = doc.getElementById(id)) ? new Item(el) : ItemRange.get(id);
  };

  Item.clear = function() {
    itemsMap = {};
  };

  function Item(el) {
    this.el = el;
  }

  Item.prototype.getAttr = function(name) {
    return this.el.getAttribute(name);
  };

  Item.prototype.setAttr = function(name, val) {
    this.el.setAttribute(name, val);
  };

  Item.prototype.getProp = function(name) {
    return this.el[name];
  };

  Item.prototype.setProp = function(name, val) {
    this.el[name] = val;
  };

  Item.prototype.getHtml = function() {
    return this.el.innerHTML;
  };

  Item.prototype.setHtml = function(html) {
    this.el.innerHTML = html;
  };

  Item.prototype.append = function(html) {
    this.el.insertAdjacentHTML('beforeend', html);
  };

  Item.prototype.insert = function(html, index) {
    this.el.childNodes[index].insertAdjacentHTML('beforebegin', html);
  };

  Item.prototype.remove = function(index) {
    var el;
    el = this.el;
    el.removeChild(el.childNodes[index]);
  };

  Item.prototype.move = function(from, to, howMany) {
    var before, child, el, frag;
    if (howMany == null) {
      howMany = 1;
    }
    el = this.el;
    child = this.el.childNodes[from];
    before = this.el.childNodes[to];
    if (howMany === 1) {
      el.insertBefore(child, before);
    } else {
      frag = doc.createDocumentFragment();
      while (howMany--) {
        frag.appendChild(child);
        child = child.nextSibling();
      }
      el.insertBefore(frag, before);
    }
  };

  return Item;

})();

module.exports = Item;
