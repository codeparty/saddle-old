// Generated by CoffeeScript 1.4.0
var RangeImplementation, SVG_CLOSE, SVG_OPEN, doc, regex_leadingWhitespase, test_killedWhitespace;

doc = document;

SVG_OPEN = '<svg xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink>';

SVG_CLOSE = '</svg>';

regex_leadingWhitespase = /^\s+/;

test_killedWhitespace = (function() {
  var testDiv;
  testDiv = document.createElement('div');
  testDiv.innerHTML = ' <i></i>';
  return testDiv.firstChild.nodeType !== 3;
})();

module.exports = {
  remove: function(el, index) {
    var child;
    if (child = el.childNodes[index]) {
      el.removeChild(child);
    }
  },
  move: function(el, from, toIndex, howMany) {
    var before, child, childNodes, frag, next;
    if (howMany == null) {
      howMany = 1;
    }
    childNodes = el.childNodes;
    child = childNodes[from];
    before = childNodes[toIndex] || null;
    if (howMany === 1) {
      el.insertBefore(child, before);
    } else {
      frag = doc.createDocumentFragment();
      while (howMany--) {
        next = child.nextSibling;
        frag.appendChild(child);
        child = next;
      }
      el.insertBefore(frag, before);
    }
  },
  extractChildren: function(node, depth) {
    var child, rootWrap, wrap;
    wrap = rootWrap = node.firstChild;
    while (--depth) {
      wrap = rootWrap.firstChild;
    }
    while (child = wrap.firstChild) {
      node.appendChild(child);
    }
    node.removeChild(rootWrap);
    return node;
  },
  svgRoot: function(el) {
    var root, tagName;
    while (el !== doc.body) {
      if (root = el.ownerSVGElement) {
        return root;
      }
      tagName = el.tagName;
      if (el.tagName && tagName.toLowerCase() === 'svg') {
        return el;
      }
      el = el.parentNode;
    }
  },
  createRange: function() {
    return new RangeImplementation;
  },
  createFragment: function(rangeOrParent, html) {
    var fragment, isSVG, range, tagName;
    if (tagName = rangeOrParent.tagName) {
      range = this.createRange();
      range.setStartAfter(rangeOrParent);
      if (tagName.toLowerCase() === 'svg') {
        isSVG = true;
        html = SVG_OPEN + html + SVG_CLOSE;
      }
    } else {
      range = rangeOrParent;
    }
    fragment = range.createContextualFragment(html);
    if (isSVG) {
      fragment = this.extractChildren(fragment, 1);
    }
    return fragment;
  },
  fixWhitespace: function(node, html) {
    if (test_killedWhitespace) {
      return html.replace(regex_leadingWhitespase, function(whitespaces) {
        return node.insertBefore(document.createTextNode(whitespaces), node.firstChild);
      });
    }
  }
};

RangeImplementation = require('./Range-shim');
