// Generated by CoffeeScript 1.4.0
var Item, ItemRange, Saddle, doc, methodName, _ref,
  __hasProp = {}.hasOwnProperty;

Item = require('./Item');

ItemRange = require('./ItemRange');

doc = document;

Saddle = (function() {
  var getCachedItem, itemsMap, markersMap, prefix, updateMarkersMap;

  itemsMap = {};

  markersMap = {};

  prefix = '';

  getCachedItem = function(id, map) {
    var item;
    if ((item = map[id]) && doc.contains(item.el || item)) {
      return item;
    }
  };

  updateMarkersMap = function() {
    var comment, commentIterator;
    markersMap = {};
    commentIterator = doc.createTreeWalker(doc.body, 128, null, false);
    while (comment = commentIterator.nextNode()) {
      markersMap[comment.data] = comment;
    }
  };

  function Saddle(options) {
    if (options == null) {
      options = {};
    }
    prefix = this.prefix = ItemRange.prefix = options.prefix || '$';
    this.useTags = ItemRange.useTags = !!options.useTags;
    this._id = 0;
  }

  Saddle.prototype.get = function(id) {
    var comment, el, item;
    if (item = getCachedItem(id, itemsMap)) {
      return item;
    }
    if ((el = doc.getElementById(id)) && el.tagName !== 'COMMENT') {
      return itemsMap[id] = new Item(el);
    }
    if (!(comment = getCachedItem(id, markersMap))) {
      updateMarkersMap();
      comment = markersMap[id];
    }
    if (comment) {
      return itemsMap[id] = new ItemRange(comment, markersMap[prefix + id]);
    }
  };

  Saddle.prototype.clear = function() {
    itemsMap = {};
    markersMap = {};
  };

  Saddle.prototype.uid = function() {
    return this.prefix + (this._id++).toString(36);
  };

  Saddle.prototype.getMarkerTpl = function() {
    if (this.useTags) {
      return function(id) {
        return ["<comment id=" + id + "/>", "<comment id=" + (this.prefix + id) + "/>"];
      };
    } else {
      return function(id) {
        return ["<!--" + id + "-->", "<!--" + (this.prefix + id) + "-->"];
      };
    }
  };

  Saddle.prototype.prepend = function(id, html) {
    this.insert(id, html, 0);
  };

  return Saddle;

})();

_ref = Item.prototype;
for (methodName in _ref) {
  if (!__hasProp.call(_ref, methodName)) continue;
  Saddle.prototype[methodName] = (function(methodName) {
    return function(id, arg1, arg2, arg3) {
      var _ref1;
      return (_ref1 = this.get(id)) != null ? _ref1[methodName](arg1, arg2, arg3) : void 0;
    };
  })(methodName);
}

module.exports = Saddle;
