// Generated by CoffeeScript 1.4.0
var ItemRange;

ItemRange = (function() {
  var commentsMap, doc;

  ItemRange.prefix = '$';

  ItemRange.useTags = false;

  doc = document;

  commentsMap = {};

  ItemRange.get = function(id) {
    var comment, commentIterator;
    if ((comment = commentsMap[id]) && doc.contains(comment)) {
      return new ItemRange(comment, id);
    }
    commentsMap = {};
    commentIterator = doc.createTreeWalker(doc.body, 128, null, false);
    while (comment = commentIterator.nextNode()) {
      commentsMap[comment.data] = comment;
    }
    if (comment = commentsMap[id]) {
      return new ItemRange(comment, commentsMap[ItemRange.prefix + id], id);
    }
  };

  ItemRange.clear = function() {
    return commentsMap = {};
  };

  function ItemRange(start, end, id) {
    this.start = start;
    this.end = end;
    this.el = start;
    this.range = doc.createRange();
    this._ranged = false;
    this._updateRange();
  }

  ItemRange.prototype._updateRange = function() {
    var range;
    if (!this._ranged) {
      range = this.range;
      range.setStartAfter(this.start);
      range.setEndBefore(this.end);
      this._ranged = true;
    }
  };

  ItemRange.prototype.setHtml = function(html) {
    var range;
    range = this.range;
    range.deleteContents();
    range.insertNode(range.createContextualFragment(html));
    this._ranged = false;
  };

  ItemRange.prototype.append = function(html) {
    var endContainer, range;
    range = this.range;
    endContainer = range.endContainer;
    endContainer.insertBefore(range.createContextualFragment(html), this.end);
    this._ranged = false;
  };

  ItemRange.prototype.insert = function(html, index) {
    var indexNode, range, startContainer;
    this._updateRange();
    range = this.range;
    if (range.endOffset - range.startOffset < index) {
      this.append(html);
    } else {
      startContainer = range.startContainer;
      indexNode = startContainer.childNodes[range.startOffset + index];
      startContainer.insertBefore(range.createContextualFragment(html), indexNode);
      this._ranged = false;
    }
  };

  ItemRange.prototype.remove = function(index) {
    var range, startContainer;
    this._updateRange();
    range = this.range;
    startContainer = range.startContainer;
    startContainer.removeChild(startContainer.childNodes[range.startOffset + index]);
  };

  ItemRange.prototype.move = function(from, to, howMany) {
    var before, child, frag, offset, range, startContainer;
    if (howMany == null) {
      howMany = 1;
    }
    range = this.range;
    startContainer = range.startContainer;
    offset = range.startOffset;
    child = startContainer.childNodes[from + offset];
    before = startContainer.childNodes[to + offset];
    if (howMany === 1) {
      startContainer.insertBefore(child, before);
    } else {
      frag = doc.createDocumentFragment();
      while (howMany--) {
        frag.appendChild(child);
        child = child.nextSibling();
      }
      startContainer.insertBefore(frag, before);
    }
  };

  return ItemRange;

})();

module.exports = ItemRange;
