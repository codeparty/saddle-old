// Generated by CoffeeScript 1.4.0
var Item, ItemRange,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Item = require('./Item');

module.exports = ItemRange;

ItemRange = (function(_super) {
  var commentsMap, createContextualFragment, createRange, doc;

  __extends(ItemRange, _super);

  ItemRange.prefix = '$';

  ItemRange.useTags = false;

  doc = document;

  createRange = function() {
    return doc.createRange();
  };

  createContextualFragment = function(html) {
    return doc.createContextualFragment(html);
  };

  commentsMap = {};

  ItemRange.get = function(id) {
    var comment, commentIterator, item;
    if (item = commentsMap[id]) {
      if (!doc.contains(item)) {
        return;
      }
      return item;
    }
    commentsMap = {};
    commentIterator = doc.createTreeWalker(doc.body, 128, null, false);
    while (comment = commentIterator.nextNode()) {
      commentsMap[comment.data] = comment;
    }
    if (comment = commentsMap[id]) {
      return new ItemRange(comment, id);
    }
  };

  function ItemRange(start, id) {
    var end, range;
    end = commentsMap[ItemRange.prefix + id];
    this.el = range = createRange();
    range.setStartAfter(start);
    range.setEndBefore(end);
  }

  ItemRange.prototype.setHtml = function(html) {
    var range;
    range = this.el;
    range.deleteContents();
    range.insertNode(createContextualFragment(html));
    return this;
  };

  return ItemRange;

})(Item);
