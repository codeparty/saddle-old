// Generated by CoffeeScript 1.4.0
var ItemRange, util;

util = require('./util');

ItemRange = (function() {
  var commentsMap, doc;

  ItemRange.prefix = '$';

  ItemRange.useTags = false;

  doc = document;

  commentsMap = {};

  ItemRange.get = function(id) {
    var comment, commentIterator;
    if ((comment = commentsMap[id]) && doc.contains(comment)) {
      return new ItemRange(comment, commentsMap[ItemRange.prefix + id], id);
    }
    commentsMap = {};
    commentIterator = doc.createTreeWalker(doc.body, 128, null, false);
    while (comment = commentIterator.nextNode()) {
      commentsMap[comment.data] = comment;
    }
    if (comment = commentsMap[id]) {
      return new ItemRange(comment, commentsMap[ItemRange.prefix + id], id);
    }
  };

  ItemRange.clear = function() {
    return commentsMap = {};
  };

  function ItemRange(start, end, id) {
    this.start = start;
    this.end = end;
    this.el = start;
    this.range = doc.createRange();
    this._ranged = false;
    this._updateRange();
  }

  ItemRange.prototype._updateRange = function() {
    var range;
    if (!this._ranged) {
      range = this.range;
      range.setStartAfter(this.start);
      range.setEndBefore(this.end);
      this._ranged = true;
    }
  };

  ItemRange.prototype.setHtml = function(html) {
    var range;
    range = this.range;
    range.deleteContents();
    range.insertNode(range.createContextualFragment(html));
    this._ranged = false;
  };

  ItemRange.prototype.append = function(html) {
    this._updateRange();
    util.rangeIns(this.range, html);
    this._ranged = false;
  };

  ItemRange.prototype.insert = function(html, index) {
    var range;
    this._updateRange();
    range = this.range;
    if (range.endOffset - range.startOffset < index) {
      this.append(html);
    } else {
      util.rangeIns(this.range, html, index);
      this._ranged = false;
    }
  };

  ItemRange.prototype.remove = function(index) {
    var range;
    this._updateRange();
    range = this.range;
    util.rmChild(range.startContainer, range.startOffset + index);
  };

  ItemRange.prototype.move = function(from, to, howMany) {
    var endOffset, indexTo, offset, range;
    if (howMany == null) {
      howMany = 1;
    }
    range = this.range;
    offset = range.startOffset;
    endOffset = range.endOffset;
    indexTo = offset + (to >= from ? to + howMany : to);
    if (indexTo > endOffset) {
      indexTo = endOffset;
    }
    util.move(range.startContainer, offset + from, indexTo, howMany);
  };

  return ItemRange;

})();

module.exports = ItemRange;
